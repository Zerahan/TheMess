UPROPERTY: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Properties/Specifiers/

	All variables in a class should have a UPROPERTY() on the line before them. This allows the engine's garbage collector to clean up RAM when the owning object is destroyed
		This is the bare minimum:
			UPROPERTY()
			bool TestVar;

			UPROPERTY(BlueprintReadWrite, EditAnywhere, Category = "ExampleClass|Subcategory")
			bool OtherVar;

		Common tags:
			BlueprintReadWrite: Blueprint code can read and modify this variable
			BlueprintReadOnly: Blueprint code can only read (not modify) the value of this variable
			
			EditAnywhere: Indicates that this property can be edited by property windows, on archetypes (editing blueprint) and instances (selecting in level). This Specifier is incompatible with any of the the "Visible" Specifiers.
			EditDefaultsOnly: Indicates that this property can be edited by property windows, but only on archetypes (by editing the Blueprint file). This Specifier is incompatible with any of the "Visible" Specifiers.

			VisibleAnywhere: Indicates that this property is visible in all property windows, but cannot be edited. This Specifier is incompatible with the "Edit" Specifiers.
			VisibleDefaultsOnly: Indicates that this property is only visible in property windows for archetypes, and cannot be edited. This Specifier is incompatible with any of the "Edit" Specifiers.

			Category="TopCategory|SubCategory|...": Allows for sorting variables into categories to clean up the editor UI

			meta = ([blah], [blah]): Generally editor-only helper stuff. Example: meta = (AllowPrivateAccess = "true")
				AllowPrivateAccess = "true": Allows blueprint to access "private:" variables
				BlueprintProtected: Allows blueprint to access "protected:" variables

UFUNCTION: https://docs.unrealengine.com/4.26/en-US/ProgrammingAndScripting/GameplayArchitecture/Functions/Specifiers/
	Functions generally should have a UFUNCTION() on the line before them.
		Examples:
			UFUNCTION()
			bool GetTestVar() const;

			UFUNCTION(BlueprintNativeEvent, Category = "ExampleClass|TestCode")
			bool GetOtherVar() const;						// This function is automatically-generated by the compiler and calls _Implementation by default. Can be overridden entirely by Blueprint
			bool GetOtherVar_Implementation() const;		// The C++ default functionality of the above function when the function is called.
			
		Common tags:
			BlueprintCallable: Allows Blueprint to call the function.
			BlueprintNativeEvent: The function is designed to be overridden by blueprint, but also includes default behavior inside a _Implementation version

			Category="TopCategory|SubCategory|...": Allows for sorting functions into categories to clean up the editor UI